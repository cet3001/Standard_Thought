import { useEffect } from 'react';

const PrerenderOptimizer = () => {
  useEffect(() => {
    // Prerender critical routes for faster navigation
    const criticalRoutes = [
      '/blog',
    ];

    // Use Intersection Observer to prerender when user hovers over links
    const observeLinks = () => {
      const links = document.querySelectorAll('a[href]');
      
      links.forEach(link => {
        const href = (link as HTMLAnchorElement).href;
        const pathname = new URL(href, window.location.origin).pathname;
        
        if (criticalRoutes.includes(pathname)) {
          // Preload on hover with debounce
          let hoverTimeout: NodeJS.Timeout;
          
          link.addEventListener('mouseenter', () => {
            hoverTimeout = setTimeout(() => {
              prerenderRoute(pathname);
            }, 100); // Small delay to avoid excessive preloading
          });
          
          link.addEventListener('mouseleave', () => {
            clearTimeout(hoverTimeout);
          });
        }
      });
    };

    // Prerender route by creating invisible iframe
    const prerenderRoute = (route: string) => {
      // Check if already prerendered
      if (document.querySelector(`iframe[data-prerender="${route}"]`)) {
        return;
      }

      // Create invisible iframe for prerendering
      const iframe = document.createElement('iframe');
      iframe.src = route;
      iframe.style.display = 'none';
      iframe.style.position = 'absolute';
      iframe.style.left = '-9999px';
      iframe.setAttribute('data-prerender', route);
      iframe.setAttribute('aria-hidden', 'true');
      
      // Remove after preload to save memory
      iframe.onload = () => {
        setTimeout(() => {
          if (iframe.parentNode) {
            iframe.parentNode.removeChild(iframe);
          }
        }, 2000);
      };

      document.body.appendChild(iframe);
      console.log('[Prerender] Preloading route:', route);
    };

    // Prefetch critical resources immediately
    const prefetchCriticalResources = () => {
      const resources = [
        // Critical API endpoints for financial content
        '/rest/v1/blog_posts?published=eq.true&featured=eq.true',
        '/rest/v1/seo_settings?page_type=eq.homepage',
        
        // Critical component chunks (would be generated by Vite)
      ];

      resources.forEach(resource => {
        const link = document.createElement('link');
        link.rel = 'prefetch';
        link.href = resource;
        link.as = resource.includes('.js') ? 'script' : 'fetch';
        if (resource.includes('/rest/v1/')) {
          link.crossOrigin = 'anonymous';
        }
        document.head.appendChild(link);
      });
    };

    // DNS prefetch for external domains that might be used
    const dnsPrefetch = () => {
      const domains = [
        'https://fonts.googleapis.com',
        'https://fonts.gstatic.com',
        'https://www.google-analytics.com',
        'https://www.googletagmanager.com',
      ];

      domains.forEach(domain => {
        const link = document.createElement('link');
        link.rel = 'dns-prefetch';
        link.href = domain;
        document.head.appendChild(link);
      });
    };

    // Preconnect to critical origins
    const preconnectCritical = () => {
      const origins = [
        'https://fonts.googleapis.com',
        'https://fonts.gstatic.com',
      ];

      origins.forEach(origin => {
        const link = document.createElement('link');
        link.rel = 'preconnect';
        link.href = origin;
        link.crossOrigin = 'anonymous';
        document.head.appendChild(link);
      });
    };

    // Initialize optimizations
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        observeLinks();
        prefetchCriticalResources();
        dnsPrefetch();
        preconnectCritical();
      });
    } else {
      setTimeout(() => {
        observeLinks();
        prefetchCriticalResources();
        dnsPrefetch();
        preconnectCritical();
      }, 1000);
    }

    // Optimize for AEO - preload content for common financial queries
    const preloadAEOContent = () => {
      // Common AEO queries related to building generational wealth
      const aeoQueries = [
        'build generational wealth Black communities',
        'credit building strategies young adults',
        'investing basics beginners guide',
        'cash management urban communities'
      ];

      // Preload content that answers these queries
      console.log('[AEO] Optimizing for queries:', aeoQueries);
      
      // This would typically involve preloading specific content sections
      // that are likely to answer these queries quickly
    };

    preloadAEOContent();

  }, []);

  return null;
};

export default PrerenderOptimizer;